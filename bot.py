
from dispatcher import dp
from db import BotDB
from aiogram import  executor, types

BotDB = BotDB('teleBot.db')


@dp.message_handler(commands=('start'), commands_prefix='/!')
async def start(message: types.Message):
    if not BotDB.user_exists(message.from_user.id):
        BotDB.add_user(message.from_user.id)
    await message.answer("Welcome!üòÅ\nI'm your ArchiveBotü§ì\nYou can save everything hereüëÄ")

    @dp.message_handler(commands=('save', 's'), commands_prefix='/!')
    async def start(message: types.Message):
        @dp.message_handler(content_types=[types.ContentType.DOCUMENT])
        async def download_doc(message: types.Message):
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤ –∫–∞—Ç–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–æ–≤ –ø–æ —Ç–∏–ø—É —Ñ–∞–π–ª–∞
            await message.document.download(destination_dir="/Users/MrSas/Documents")
            await message.answer("Document savedü•≥")

        # –¢–∏–ø—ã —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç–æ–∂–µ –º–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ-—Ä–∞–∑–Ω–æ–º—É.
        @dp.message_handler(content_types=["photo"])
        async def download_photo(message: types.Message):
            # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞—Ç–∞–ª–æ–≥ /tmp/somedir —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!
            await message.photo[-1].download(destination_dir="/Users/MrSas/Documents")
            await message.answer("Photo savedü•≥")

        @dp.message_handler(commands=('text'), commands_prefix='/!')
        async def start(message: types.Message):
            cmd_variants = ('/text', '!text')

            text = message.text
            for i in cmd_variants:
                text = text.replace(i, '').strip()
            BotDB.add_record(message.from_user.id, text)
            await message.answer("Text savedüòã")
        await message.answer("Sendü•∫")
    @dp.message_handler(commands=('download','d'), commands_prefix='/!')
    async def start(message: types.Message):
        @dp.message_handler(commands=('photo_up', 'ph'),commands_prefix='/!' )
        async def upload_ph(message: types.Message):
            await message.answer_document(open("/Users/MrSas/Documents/photos/file_6.jpg", "rb"))



    @dp.message_handler(commands=("history", "h"), commands_prefix="/!")
    async def start(message: types.Message):
        cmd_variants = ('/history', '/h', '!history', '!h')
        within_als = {
            "day": ('today', 'day', '—Å–µ–≥–æ–¥–Ω—è', '–¥–µ–Ω—å'),
            "month": ('month', '–º–µ—Å—è—Ü'),
            "year": ('year', '–≥–æ–¥'),
        }

        cmd = message.text
        for r in cmd_variants:
            cmd = cmd.replace(r, '').strip()

        within = 'day'
        if (len(cmd)):
            for k in within_als:
                for als in within_als[k]:
                    if (als == cmd):
                        within = k

        records = BotDB.get_records(message.from_user.id, within)
        await message.answer(records)

    # @dp.message_handler(commands=['img'])
    # def ext_photo(message):
    #     # –æ—Ç–∫—Ä–æ–µ–º –ë–î –∏ –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–≤–ª–µ—á—ë–º –¥–∞–Ω–Ω—ã–µ base64
    #     conn = sq.connect("myBot.db.db")
    #     img = conn.execute('SELECT files FROM records WHERE user_id = ?', (message.chat.id,)).fetchone()
    #     if img is None:
    #         conn.close()
    #         return None
    #     else:
    #         conn.close()
    #
    #         # —Å–æ—Ö—Ä–∞–Ω–∏–º base64 –≤ –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    #         with open("Users/MrSas/Documents/photos", "wb") as fh:
    #             fh.write(base64.decodebytes(img[0]))
    #             dp.send_photo(message.chat.id, open("Users/MrSas/Documents/photos", "rb"))

@dp.message_handler(commands=('help'), commands_prefix='/!')
async def start(message: types.Message):
    await message.answer(
        'Commands:\n /start - start bot,\n /help - all commands,\n /save - save files, \n /history - output '
        'files and files date,\n /photo - saved or upload photo,\n /document - saved or upload documents,\n /text - saved text,\n /download - bot send files')








if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
